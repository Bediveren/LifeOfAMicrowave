<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_standing_still</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables

//moving
grav = 0.5;
horizontalSpeed = 0;
verticalSpeed = 0;
jumpSpeed = 20;
moveSpeed = 15;

//combat
hitpoints = 5;

//object status
sizeHeight = 128;
sizeWidth = 128;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
key_shoot = keyboard_check_pressed(vk_space);

//React to inputs;
move = key_left + key_right;
horizontalSpeed = move * moveSpeed;
if(verticalSpeed &lt; 18) verticalSpeed += grav;
if(place_meeting(x,y + 1, obj_p_wall))
{
    verticalSpeed = key_jump * -jumpSpeed;
}
//Horizontal collision
if(place_meeting(x+horizontalSpeed, y, obj_p_wall))
{
    while(!place_meeting(x+sign(horizontalSpeed),y, obj_p_wall))
    {
        x+=sign(horizontalSpeed);
    }  
    horizontalSpeed = 0;
}
else x += horizontalSpeed;
//Vertical collision
if(place_meeting(x, y+verticalSpeed, obj_p_wall))
{
    while(!place_meeting(x,y + sign(verticalSpeed), obj_p_wall))
    {
        y+=sign(verticalSpeed);
    }   
    verticalSpeed = 0;
}
else y += verticalSpeed;
//wave moving
if(instance_exists(obj_p_wave))
{
    with(obj_p_wave)
    {
        x = other.x + other.sizeWidth;
        y = other.y
    }
}
//animations
if(move != 0)
{
    //image_xscale = move;
    if(place_meeting(x,y + 1, obj_p_wall)) 
    {   
        if(move &gt; 0) sprite_index = spr_walking_right;
        else sprite_index = spr_walking_left_2;
    }
    else
    {
        if(verticalSpeed &lt; 0)
        {
            if(move &gt; 0 ) sprite_index = spr_up_right;
            else sprite_index = spr_up_left;
        }
    }
} 
else
{
    sprite_index = spr_standing_still;
}
//collision fix
/*
if(place_meeting(x,y,obj_p_wall))
{
    while(place_meeting(x,y,obj_p_wall))
    {
        y-=1;
    }
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(obj_p_wave))
{
    wave = instance_create(x+sizeWidth, y , obj_p_wave);
    with(wave)
    {
        direction = other.image_angle;
        image_angle = other.image_angle;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_p_wave))
{
    with(obj_p_wave)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
