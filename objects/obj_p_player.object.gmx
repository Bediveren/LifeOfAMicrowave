<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_standing_still</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables

//moving
grav = 0.5;
horizontalSpeed = 0;
verticalSpeed = 0;
jumpSpeed = 20;
moveSpeed = 15;

//combat
hitpoints = 100;
direct = 1;
//object status
sizeHeight = 205;
sizeWidth = 128;
shooting = false;
halfSecond = 0;
image_speed = 0.1;
depth = -1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);  
//React to inputs;
if(shooting == false)
{
    move = key_left + key_right;
    horizontalSpeed = move * moveSpeed;
    if(move != 0 ) direct = sign(move);
}
else
{
    move = 0;
    horizontalSpeed = 0;
}
    //gravity
if(verticalSpeed &lt; 25) verticalSpeed += grav;
//jumping
if(shooting == false)
    if(place_meeting(x,y + 1, obj_p_wall))
    {
        verticalSpeed = key_jump * -jumpSpeed;
        if(key_jump) audio_play_sound(s_microwave_jump, 1, false);
    }
//Horizontal collision
if(place_meeting(x+horizontalSpeed, y, obj_p_wall))
{
    while(!place_meeting(x+sign(horizontalSpeed),y, obj_p_wall))
    {
        x+=sign(horizontalSpeed);
    }  
    horizontalSpeed = 0;
}
else x += horizontalSpeed;
//Vertical collision
if(place_meeting(x, y+verticalSpeed, obj_p_wall))
{
    while(!place_meeting(x,y + sign(verticalSpeed), obj_p_wall))
    {
        y+=sign(verticalSpeed);
    }   
    verticalSpeed = 0;
}
else y += verticalSpeed;

//animations
if(move != 0)
{
    if(place_meeting(x,y + 1, obj_p_wall)) 
    {   
        if(move &gt; 0)
        {
            sprite_index = spr_walking_right;
        }
        else 
        {
            sprite_index = spr_walking_left;
        }
    }
    else
    {
        if(verticalSpeed &lt; 0)
        {
            if(move &gt; 0 ) sprite_index = spr_up_right;
            else sprite_index = spr_up_left;
        }
    }
} 
else
{
    sprite_index = spr_standing_still;
}
//check colision with sink
halfSecond++;
if(halfSecond == 30)
{
    if(place_meeting(x,y+6,obj_sinkBottomTransp))
    {
        hitpoints -= 20;
        audio_play_sound(s_microwave_damaged, 0, false);
    }
    halfSecond = 0;
    if(place_meeting(x,y+5, obj_t_ofire))
    {
        hitpoints -=15;
        audio_stop_sound(s_oven_fire);
        audio_play_sound(s_oven_fire, 0, false);
    }
}
if(!place_meeting(x, y+5, obj_t_ofire))
{
    audio_stop_sound(s_oven_fire); 
}
//set lives
if(hitpoints != 100) life = hitpoints/20 + 1;
else life = 5;
inst_lives = instance_find(obj_lives,1);
with(inst_lives)
{
    image_index = other.life;
    image_speed = 0;
}
if(hitpoints &lt;= 0)
{   
    inst_lives = instance_find(obj_lives,1);
    with(inst_lives)
    {
        image_index = 0;
        image_speed = 0;
    }
    audio_stop_sound(s_oven_fire);
    instance_create(x, y, obj_player_death);
    instance_destroy();
}
smth = false;
if(x &gt;= 2888)
{
    if(room != rm_map2)
    {
        room_goto(rm_map2);
        x = 128;
        smth = true;
    }
        
}
if(!smth)
    if(x &lt;= 50)
    {
        if(room != rm_map3)
        {
            room_goto(rm_map3);
            x = 2888;
            smth = false;
            
        }
            
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_trashbin">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitpoints = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_j_cherryBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitpoints -= 5;
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_melee">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitpoints -= 25;
with(other)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//space pressed
if(!instance_exists(obj_p_wave))
{
    if(place_meeting(x,y + 1, obj_p_wall))
    {
        wave = instance_create(x + sizeWidth * sign(direct), y, obj_p_wave);
        wave.image_xscale = sign(direct);
        shooting = true;
        audio_play_sound(s_microwave_cancerray_sound, 1, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(obj_p_wave))
{
    wave = instance_find(obj_p_wave,1);
    with(wave)
    {
        instance_destroy();
        
    }
    shooting = false;
    audio_stop_sound(s_microwave_cancerray_sound);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
